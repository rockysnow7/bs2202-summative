/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.main;

import org.example.clothing.Clothing;
import org.example.database.DatabaseConnection;
import org.example.enums.UserType;
import org.example.requests.AccountCreationRequest;
import org.example.settings.RestockSettings;
import org.example.shirt.ButtonUpShirt;
import org.example.shirt.Shirt;
import org.example.shirt.TShirt;
import org.example.shoes.AthleticShoes;
import org.example.shoes.DressShoes;
import org.example.shoes.Shoes;
import org.example.user.User;

import java.math.BigInteger;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.stream.Collectors;

import javax.imageio.ImageIO;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class App extends Application {
    DatabaseConnection databaseConnection = new DatabaseConnection();
    // The ID of the currently logged in user. If no user is logged in, it is -1.
    int userId = -1;

    public static void main(String[] args) {
        launch(args);
    }

    // Returns the SHA-256 hash of a given password.
    private static String hashPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = digest.digest(password.getBytes(StandardCharsets.UTF_8));

            return String.format("%064x", new BigInteger(1, hashBytes));
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    // Returns true if the username is valid, false otherwise.
    private static boolean isUsernameValid(String username) {
        return username.length() > 0 && username.length() <= 40;
    }

    // Returns true if the username is already taken, false otherwise.
    private boolean isUsernameTaken(String username) {
        ArrayList<User> users = databaseConnection.getAllUsers();
        ArrayList<String> userUsernames = users
            .stream()
            .map(user -> user.username)
            .collect(Collectors.toCollection(ArrayList::new));
        ArrayList<String> accountCreationRequestsUsernames = databaseConnection
            .getAllAccountCreationRequests()
            .stream()
            .map(request -> request.username)
            .collect(Collectors.toCollection(ArrayList::new));

        return userUsernames.contains(username) || accountCreationRequestsUsernames.contains(username);
    }

    // Returns true if the password is valid, false otherwise.
    private static boolean isPasswordValid(String password) {
        return password.length() > 0;
    }

    // Styles a given `GridPane` (to maintain consistency).
    private void styleGrid(GridPane grid) {
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(10, 25, 25, 10));
    }

    // Displays the view account creation requests page.
    private void showViewAccountCreationRequestsPage(Stage stage) throws Exception {
        stage.setTitle("Manage Account Creation Requests");

        GridPane grid = new GridPane();
        styleGrid(grid);

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> {
            try {
                showMainPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(backButton, 0, 0);

        Text sceneTitle = new Text("Account Creation Requests");
        sceneTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        grid.add(sceneTitle, 0, 1, 2, 1);

        ListView<String> accountCreationRequestsListView = new ListView<>();
        ArrayList<AccountCreationRequest> accountCreationRequests = databaseConnection.getAllAccountCreationRequests();
        ArrayList<String> accountCreationRequestsUsernames = accountCreationRequests
            .stream()
            .map(request -> request.username)
            .collect(Collectors.toCollection(ArrayList::new));
        accountCreationRequestsListView.setItems(FXCollections.observableArrayList(accountCreationRequestsUsernames));
        grid.add(accountCreationRequestsListView, 0, 2, 2, 1);

        Button approveButton = new Button("Approve");
        approveButton.setOnAction(e -> {
            try {
                int index = accountCreationRequestsListView.getSelectionModel().getSelectedIndex();
                if (index == -1) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error");
                    alert.setHeaderText("No account creation request selected.");
                    alert.showAndWait();
                    return;
                }

                // approve the request
                AccountCreationRequest request = accountCreationRequests.get(index);
                databaseConnection.approveAccountCreationRequest(request.requestId);
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Success");
                alert.setHeaderText("Account creation request approved.");
                alert.showAndWait();

                // remove the request from the list
                accountCreationRequests.remove(index);
                accountCreationRequestsUsernames.remove(index);
                accountCreationRequestsListView.setItems(FXCollections.observableArrayList(accountCreationRequestsUsernames));
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(approveButton, 0, 3);

        Button denyButton = new Button("Deny");
        denyButton.setOnAction(e -> {
            try {
                int index = accountCreationRequestsListView.getSelectionModel().getSelectedIndex();
                if (index == -1) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error");
                    alert.setHeaderText("No account creation request selected.");
                    alert.showAndWait();
                    return;
                }

                // deny the request
                AccountCreationRequest request = accountCreationRequests.get(index);
                databaseConnection.denyAccountCreationRequest(request.requestId);
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Success");
                alert.setHeaderText("Account creation request denied.");
                alert.showAndWait();

                // remove the request from the list
                accountCreationRequests.remove(index);
                accountCreationRequestsUsernames.remove(index);
                accountCreationRequestsListView.setItems(FXCollections.observableArrayList(accountCreationRequestsUsernames));
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(denyButton, 1, 3);

        Scene scene = new Scene(grid, 300, 275);
        stage.setScene(scene);
        stage.show();
    }

    // Displays the edit privileges page.
    private void showEditPrivilegesPage(Stage stage) throws Exception {
        stage.setTitle("Edit Privileges");

        GridPane grid = new GridPane();
        styleGrid(grid);

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> {
            try {
                showMainPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(backButton, 0, 0);

        Text sceneTitle = new Text("Edit Privileges");
        sceneTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        grid.add(sceneTitle, 0, 1, 2, 1);

        ListView<String> usersListView = new ListView<>();
        ArrayList<User> users = databaseConnection
            .getAllUsers()
            .stream()
            .filter(user -> user.userId != userId)
            .collect(Collectors.toCollection(ArrayList::new));
        ArrayList<String> displayUsers = users
            .stream()
            .map(user -> String.format("%s (%s)", user.username, user.userType))
            .collect(Collectors.toCollection(ArrayList::new));
        usersListView.setItems(FXCollections.observableArrayList(displayUsers));
        grid.add(usersListView, 0, 2, 2, 1);

        Button promoteButton = new Button("Promote");
        promoteButton.setOnAction(e -> {
            int index = usersListView.getSelectionModel().getSelectedIndex();
            if (index == -1) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("No user selected.");
                alert.showAndWait();
                return;
            }

            User user = users.get(index);
            if (user.userType == UserType.ADMIN) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Cannot promote admin.");
                alert.showAndWait();
                return;
            }

            databaseConnection.setUserTypeOfUser(user.userId, UserType.ADMIN);
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Success");
            alert.setHeaderText("User promoted to admin.");
            alert.showAndWait();

            // update the list
            users.set(index, new User(user.userId, user.username, user.passwordHash, UserType.ADMIN));
            displayUsers.set(index, String.format("%s (%s)", user.username, UserType.ADMIN));
            usersListView.setItems(FXCollections.observableArrayList(displayUsers));
        });
        grid.add(promoteButton, 0, 3);

        Button demoteButton = new Button("Demote");
        demoteButton.setOnAction(e -> {
            int index = usersListView.getSelectionModel().getSelectedIndex();
            if (index == -1) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("No user selected.");
                alert.showAndWait();
                return;
            }
            
            User user = users.get(index);
            if (user.userType == UserType.STANDARD) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Cannot demote standard user.");
                alert.showAndWait();
                return;
            }

            databaseConnection.setUserTypeOfUser(user.userId, UserType.STANDARD);
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Success");
            alert.setHeaderText("User demoted to standard.");
            alert.showAndWait();

            // update the list
            users.set(index, new User(user.userId, user.username, user.passwordHash, UserType.STANDARD));
            displayUsers.set(index, String.format("%s (%s)", user.username, UserType.STANDARD));
            usersListView.setItems(FXCollections.observableArrayList(displayUsers));
        });
        grid.add(demoteButton, 1, 3);

        Scene scene = new Scene(grid, 300, 275);
        stage.setScene(scene);
        stage.show();
    }

    // Returns the details of a given item as a string. Used by `showBuySellItemsPage`.
    private static String getItemDetailsFull(Clothing item) {
        String itemDetails = "";
        if (item instanceof Shirt) {
            Shirt shirt = (Shirt) item;
            itemDetails = String.format(
                "Shirt: '%s' by '%s'\nSize: %d, Material: %s\nDate Last Bought: %s, Stock Quantity: %d\nPrice: £%.2f, Sleeve Type: %s, Neck Type: %s\nPattern: %s, Num Pockets: %d",
                shirt.name,
                shirt.brand,
                shirt.size,
                shirt.material,
                shirt.dateLastBought.toString(),
                shirt.stockQuantity,
                shirt.price,
                shirt.sleeveType.toString(),
                shirt.neckType.toString(),
                shirt.pattern,
                shirt.numPockets
            );

            if (shirt instanceof TShirt) {
                TShirt tShirt = (TShirt) shirt;
                itemDetails += String.format("\nHas Graphic: %b", tShirt.hasGraphic);
            } else if (shirt instanceof ButtonUpShirt) {
                ButtonUpShirt buttonUpShirt = (ButtonUpShirt) shirt;
                itemDetails += String.format("\nCuff Style: %s", buttonUpShirt.cuffStyle.toString());
            }
        } else if (item instanceof Shoes) {
            Shoes shoes = (Shoes) item;
            itemDetails = String.format(
                "Shoes: '%s' by '%s'\nSize: %d, Material: %s\nDate Last Bought: %s, Stock Quantity: %d\nPrice: £%.2f, Heel Height: %s, Closure Type: %s, Sole Type: %s",
                shoes.name,
                shoes.brand,
                shoes.size,
                shoes.material,
                shoes.dateLastBought.toString(),
                shoes.stockQuantity,
                shoes.price,
                shoes.heelHeight.toString(),
                shoes.closureType.toString(),
                shoes.soleType.toString()
            );

            if (shoes instanceof DressShoes) {
                DressShoes dressShoes = (DressShoes) shoes;
                itemDetails += String.format("\nToe Style: %s", dressShoes.toeStyle.toString());
            } else if (shoes instanceof AthleticShoes) {
                AthleticShoes athleticShoes = (AthleticShoes) shoes;
                itemDetails += String.format("\nSport: %s", athleticShoes.sport);
            }
        }

        return itemDetails;
    }

    // Displays the buy/sell items page.
    private void showBuySellItemsPage(Stage stage) throws Exception {
        stage.setTitle("Buy/Sell Items");

        GridPane grid = new GridPane();
        styleGrid(grid);

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> {
            try {
                showManageItemsPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(backButton, 0, 0);

        Text sceneTitle = new Text("Buy/Sell Items");
        sceneTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        grid.add(sceneTitle, 0, 1, 2, 1);

        ArrayList<Clothing> items = databaseConnection.getAllItems();
        for (int i = 0; i < items.size(); i++) {
            Clothing item = items.get(i);

            int itemTopRow = i * 3 + 2; // 3 rows per item, offset by 2 for the header and back button
            final int itemIndex = i;

            // display the item image and details
            URL imagePath = getClass().getResource(String.format("/images/%s", item.imagePath));
            ImageView imageView = new ImageView(imagePath.toExternalForm());
            imageView.setFitWidth(100);
            imageView.setFitHeight(100);
            grid.add(imageView, 0, itemTopRow, 1, 1);

            String itemDetails = getItemDetailsFull(item);
            Text itemDetailsText = new Text(itemDetails);
            grid.add(itemDetailsText, 1, itemTopRow, 1, 1);

            // display buy input and button
            Label buyQuantityLabel = new Label("Buy Quantity:");
            grid.add(buyQuantityLabel, 0, itemTopRow + 1, 1, 1);
            TextField buyQuantityInput = new TextField();
            grid.add(buyQuantityInput, 1, itemTopRow + 1, 1, 1);

            Button buyButton = new Button("Buy");
            buyButton.setOnAction(e -> {
                try {
                    int buyQuantity = Integer.parseInt(buyQuantityInput.getText());
                    if (buyQuantity < 0) {
                        Alert alert = new Alert(Alert.AlertType.ERROR);
                        alert.setTitle("Error");
                        alert.setHeaderText("Quantity cannot be negative.");
                        alert.showAndWait();
                        return;
                    }

                    databaseConnection.buyItem(item.id, buyQuantity);

                    // update the `items` list
                    items.set(itemIndex, databaseConnection.getItemById(item.id));

                    // update the item details string
                    String updatedItemDetails = getItemDetailsFull(items.get(itemIndex));
                    itemDetailsText.setText(updatedItemDetails);

                    // alert the user that the items have been bought
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Success");
                    alert.setHeaderText("Items bought successfully.");
                    alert.showAndWait();
                } catch (NumberFormatException ex) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error");
                    alert.setHeaderText("Invalid quantity: quantity must be a number.");
                    alert.showAndWait();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            });
            grid.add(buyButton, 2, itemTopRow + 1, 1, 1);

            // display sell input and button
            Label sellQuantityLabel = new Label("Sell Quantity:");
            grid.add(sellQuantityLabel, 0, itemTopRow + 2, 1, 1);
            TextField sellQuantityInput = new TextField();
            grid.add(sellQuantityInput, 1, itemTopRow + 2, 1, 1);

            Button sellButton = new Button("Sell");
            sellButton.setOnAction(e -> {
                try {
                    int sellQuantity = Integer.parseInt(sellQuantityInput.getText());
                    if (sellQuantity < 0) {
                        Alert alert = new Alert(Alert.AlertType.ERROR);
                        alert.setTitle("Error");
                        alert.setHeaderText("Quantity cannot be negative.");
                        alert.showAndWait();
                        return;
                    }

                    if (sellQuantity > items.get(itemIndex).stockQuantity) {
                        Alert alert = new Alert(Alert.AlertType.ERROR);
                        alert.setTitle("Error");
                        alert.setHeaderText("Cannot sell more items than in stock.");
                        alert.showAndWait();
                        return;
                    }

                    databaseConnection.sellItem(item.id, sellQuantity);

                    // alert the user that the items have been sold
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Success");
                    alert.setHeaderText("Items sold successfully.");
                    alert.showAndWait();

                    // restock the item if needed
                    if (databaseConnection.restockItem(item.id) != -1) {
                        alert = new Alert(Alert.AlertType.INFORMATION);
                        alert.setTitle("Restocked");
                        alert.setHeaderText(String.format("Item automatically restocked to %d items.", databaseConnection.getItemById(item.id).stockQuantity));
                        alert.showAndWait();
                    }

                    // update the `items` list and item details string
                    items.set(itemIndex, databaseConnection.getItemById(item.id));

                    String updatedItemDetails = getItemDetailsFull(items.get(itemIndex));
                    itemDetailsText.setText(updatedItemDetails);
                } catch (NumberFormatException ex) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error");
                    alert.setHeaderText("Invalid quantity: quantity must be a number.");
                    alert.showAndWait();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            });
            grid.add(sellButton, 2, itemTopRow + 2, 1, 1);
        }

        Scene scene = new Scene(grid, 300, 275);
        stage.setScene(scene);
        stage.show();
    }

    // Returns the details of a given item as a string. Used by `showEditRestockSettingsPage`.
    private static String getItemDetailsForShowEditRestockSettingsPage(Clothing item, RestockSettings restockSettings) {
        return String.format(
            "Name: %s\nBrand: %s\nCurrent Stock Quantity: %d\nMinimum Stock Quantity: %s",
            item.name,
            item.brand,
            item.stockQuantity,
            restockSettings.restockAutomatically ? restockSettings.minimumStockQuantity : "Not set"
        );
    }

    // Displays the edit restock settings page.
    private void showEditRestockSettingsPage(Stage stage) throws Exception {
        stage.setTitle("Edit Restock Settings");

        GridPane grid = new GridPane();
        styleGrid(grid);

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> {
            try {
                showManageItemsPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(backButton, 0, 0);

        Text sceneTitle = new Text("Edit Restock Settings");
        sceneTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        grid.add(sceneTitle, 0, 1, 2, 1);

        ArrayList<Clothing> items = databaseConnection.getAllItems();
        for (int i = 0; i < items.size(); i++) {
            Clothing item = items.get(i);
            RestockSettings restockSettings = databaseConnection.getRestockSettings(item.id);

            int itemTopRow = i * 3 + 2; // 3 rows per item, offset by 2 for the header and back button
            final int itemIndex = i;

            // display the item image and details
            URL imagePath = getClass().getResource(String.format("/images/%s", item.imagePath));
            ImageView imageView = new ImageView(imagePath.toExternalForm());
            imageView.setFitWidth(100);
            imageView.setFitHeight(100);
            grid.add(imageView, 0, itemTopRow, 1, 1);

            String itemDetails = getItemDetailsForShowEditRestockSettingsPage(item, restockSettings);
            Text itemDetailsText = new Text(itemDetails);
            grid.add(itemDetailsText, 1, itemTopRow, 1, 1);

            // display the restock settings
            Label newMinimumStockQuantityLabel = new Label("New Minimum Stock Quantity:");
            grid.add(newMinimumStockQuantityLabel, 0, itemTopRow + 1, 1, 1);
            TextField newMinimumStockQuantityInput = new TextField();
            grid.add(newMinimumStockQuantityInput, 1, itemTopRow + 1, 1, 1);

            Button setButton = new Button("Set");
            setButton.setOnAction(e -> {
                try {
                    int newMinimumStockQuantity = Integer.parseInt(newMinimumStockQuantityInput.getText());
                    if (newMinimumStockQuantity < 0) {
                        Alert alert = new Alert(Alert.AlertType.ERROR);
                        alert.setTitle("Error");
                        alert.setHeaderText("Minimum stock quantity cannot be negative.");
                        alert.showAndWait();
                        return;
                    }
                    databaseConnection.setRestockSettings(new RestockSettings(item.id, true, newMinimumStockQuantity));

                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Success");
                    alert.setHeaderText("Restock settings saved.");
                    alert.showAndWait();

                    // restock the item if needed
                    if (databaseConnection.restockItem(item.id) != -1) {
                        alert = new Alert(Alert.AlertType.INFORMATION);
                        alert.setTitle("Restocked");
                        alert.setHeaderText(String.format("Item automatically restocked to %d items.", databaseConnection.getItemById(item.id).stockQuantity));
                        alert.showAndWait();
                    }

                    // update the `items` list and item details string
                    items.set(itemIndex, databaseConnection.getItemById(item.id));

                    RestockSettings newRestockSettings = databaseConnection.getRestockSettings(item.id);
                    String updatedItemDetails = getItemDetailsForShowEditRestockSettingsPage(items.get(itemIndex), newRestockSettings);
                    itemDetailsText.setText(updatedItemDetails);
                } catch (NumberFormatException ex) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error");
                    alert.setHeaderText("Invalid quantity: quantity must be a number.");
                    alert.showAndWait();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            });
            grid.add(setButton, 2, itemTopRow + 1, 1, 1);

            if (restockSettings.restockAutomatically) {
                Button unsetButton = new Button("Unset");
                unsetButton.setOnAction(e -> {
                    databaseConnection.setRestockSettings(new RestockSettings(item.id, false, 0));

                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Success");
                    alert.setHeaderText("Restock settings unset.");
                    alert.showAndWait();

                    // update the `items` list and item details string
                    items.set(itemIndex, databaseConnection.getItemById(item.id));

                    RestockSettings newRestockSettings = databaseConnection.getRestockSettings(item.id);
                    String updatedItemDetails = getItemDetailsForShowEditRestockSettingsPage(items.get(itemIndex), newRestockSettings);
                    itemDetailsText.setText(updatedItemDetails);
                });
                grid.add(unsetButton, 3, itemTopRow + 1, 1, 1);
            }
        }

        Scene scene = new Scene(grid, 300, 275);
        stage.setScene(scene);
        stage.show();
    }

    // Displays the view items page.
    private void showViewItemsPage(Stage stage, String searchQuery) throws Exception {
        stage.setTitle("View Items");

        GridPane grid = new GridPane();
        styleGrid(grid);

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> {
            try {
                showManageItemsPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(backButton, 0, 0);

        Text sceneTitle = new Text("View Items");
        sceneTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        grid.add(sceneTitle, 0, 1, 2, 1);

        Label searchQueryLabel = new Label("Search Query:");
        grid.add(searchQueryLabel, 0, 2);

        TextField searchQueryInput = new TextField();
        grid.add(searchQueryInput, 1, 2);

        Button searchButton = new Button("Search");
        searchButton.setOnAction(e -> {
            try {
                showViewItemsPage(stage, searchQueryInput.getText());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(searchButton, 2, 2);

        ArrayList<Clothing> items = databaseConnection.getAllItems();
        items = items.stream()
            .filter(item -> item.name.toLowerCase().contains(searchQuery.toLowerCase()))
            .collect(Collectors.toCollection(ArrayList::new));

        for (int i = 0; i < items.size(); i++) {
            Clothing item = items.get(i);

            int itemTopRow = i * 2 + 3; // 2 rows per item, offset by 3 for the header, back button, and search query
            final int itemIndex = i;

            // display the item image and details
            URL imagePath = getClass().getResource(String.format("/images/%s", item.imagePath));
            ImageView imageView = new ImageView(imagePath.toExternalForm());
            imageView.setFitWidth(100);
            imageView.setFitHeight(100);
            grid.add(imageView, 0, itemTopRow, 1, 1);

            String itemDetails = getItemDetailsFull(item);
            Text itemDetailsText = new Text(itemDetails);
            grid.add(itemDetailsText, 1, itemTopRow, 1, 1);
        }

        Scene scene = new Scene(grid, 300, 275);
        stage.setScene(scene);
        stage.show();
    }

    // Displays the manage items page.
    private void showManageItemsPage(Stage stage) throws Exception {
        stage.setTitle("Manage Items");

        GridPane grid = new GridPane();
        styleGrid(grid);

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> {
            try {
                showMainPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(backButton, 0, 0);

        Text sceneTitle = new Text("Manage Items");
        sceneTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        grid.add(sceneTitle, 0, 1, 2, 1);

        Button buySellButton = new Button("Buy/Sell Items");
        buySellButton.setOnAction(e -> {
            try {
                showBuySellItemsPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(buySellButton, 0, 2);

        Button editRestockSettingsButton = new Button("Edit Restock Settings");
        editRestockSettingsButton.setOnAction(e -> {
            try {
                showEditRestockSettingsPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(editRestockSettingsButton, 0, 3);

        Button viewItemsButton = new Button("View Items");
        viewItemsButton.setOnAction(e -> {
            try {
                showViewItemsPage(stage, "");
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(viewItemsButton, 0, 4);

        Scene scene = new Scene(grid, 300, 275);
        stage.setScene(scene);
        stage.show();
    }

    // Displays the main page.
    private void showMainPage(Stage stage) throws Exception {
        stage.setTitle("Main");

        GridPane grid = new GridPane();
        styleGrid(grid);

        Button logOutButton = new Button("Log Out");
        logOutButton.setOnAction(e -> {
            try {
                userId = -1;
                showStartPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(logOutButton, 0, 0);

        Text sceneTitle = new Text("Main");
        sceneTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        grid.add(sceneTitle, 0, 1, 2, 1);

        Button manageItemsButton = new Button("Manage Items");
        manageItemsButton.setOnAction(e -> {
            try {
                showManageItemsPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(manageItemsButton, 0, 2);

        UserType userType = databaseConnection.getUserTypeOfUser(userId);
        if (userType == UserType.ADMIN) {
            Button viewAccountCreationRequestsButton = new Button("View Account Creation Requests");
            viewAccountCreationRequestsButton.setOnAction(e -> {
                try {
                    showViewAccountCreationRequestsPage(stage);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            });
            grid.add(viewAccountCreationRequestsButton, 0, 3);

            Button editPrivilegesButton = new Button("Edit Privileges");
            editPrivilegesButton.setOnAction(e -> {
                try {
                    showEditPrivilegesPage(stage);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            });
            grid.add(editPrivilegesButton, 0, 4);
        }

        Scene scene = new Scene(grid, 300, 275);
        stage.setScene(scene);
        stage.show();
    }

    // Displays the log in page.
    private void showLogInPage(Stage stage) throws Exception {
        stage.setTitle("Log In");

        GridPane grid = new GridPane();
        styleGrid(grid);

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> {
            try {
                showStartPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(backButton, 0, 0);

        Text sceneTitle = new Text("Log In");
        sceneTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        grid.add(sceneTitle, 0, 1, 2, 1);

        Label usernameLabel = new Label("Username:");
        grid.add(usernameLabel, 0, 2);

        TextField usernameInput = new TextField();
        grid.add(usernameInput, 1, 2);

        Label passwordLabel = new Label("Password:");
        grid.add(passwordLabel, 0, 3);

        PasswordField passwordInput = new PasswordField();
        grid.add(passwordInput, 1, 3);

        Button logInButton = new Button("Log In");
        logInButton.setOnAction(e -> {
            String username = usernameInput.getText();
            String password = passwordInput.getText();
            String hashedPassword = hashPassword(password);

            int userId = databaseConnection.validateLogin(username, hashedPassword);
            if (userId != -1) {
                try {
                    this.userId = userId;
                    showMainPage(stage);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Incorrect username or password </3");
                alert.showAndWait();
            }
        });
        grid.add(logInButton, 1, 4);

        Scene scene = new Scene(grid, 300, 275);
        stage.setScene(scene);
        stage.show();
    }

    // Displays the account creation request page.
    private void showCreateAccountRequestPage(Stage stage) throws Exception {
        stage.setTitle("Request Account Creation");

        GridPane grid = new GridPane();
        styleGrid(grid);

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> {
            try {
                showStartPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(backButton, 0, 0);

        Text sceneTitle = new Text("Request Account Creation");
        sceneTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        grid.add(sceneTitle, 0, 1, 2, 1);

        Label usernameLabel = new Label("Username:");
        grid.add(usernameLabel, 0, 2);

        TextField usernameInput = new TextField();
        grid.add(usernameInput, 1, 2);

        Label passwordLabel = new Label("Password:");
        grid.add(passwordLabel, 0, 3);

        PasswordField passwordInput = new PasswordField();
        grid.add(passwordInput, 1, 3);
        
        Button requestButton = new Button("Request Account Creation");
        requestButton.setOnAction(e -> {
            String username = usernameInput.getText();
            String password = passwordInput.getText();
            if (!isUsernameValid(username)) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Invalid username: username must be between 1 and 40 characters.");
                alert.showAndWait();
                return;
            }
            if (isUsernameTaken(username)) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Username already taken: please choose another username.");
                alert.showAndWait();
                return;
            }
            if (!isPasswordValid(password)) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Invalid password: password must be at least 1 character.");
                alert.showAndWait();
                return;
            }

            String hashedPassword = hashPassword(password);

            databaseConnection.createAccountCreationRequest(username, hashedPassword);
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Account Creation Request");
            alert.setHeaderText("Account creation request sent <3");
            alert.showAndWait();
        });
        grid.add(requestButton, 1, 4);

        Scene scene = new Scene(grid, 300, 275);
        stage.setScene(scene);
        stage.show();
    }

    // Displays the start page.
    private void showStartPage(Stage stage) throws Exception {
        stage.setTitle("Stock Management System");

        GridPane grid = new GridPane();
        styleGrid(grid);

        Text sceneTitle = new Text("Welcome");
        sceneTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        grid.add(sceneTitle, 0, 0, 2, 1);

        Scene scene = new Scene(grid, 300, 275);
        stage.setScene(scene);

        Button logInButton = new Button("Log In");
        logInButton.setOnAction(e -> {
            try {
                showLogInPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(logInButton, 0, 2);

        Button createAccountRequestButton = new Button("Request Account Creation");
        createAccountRequestButton.setOnAction(e -> {
            try {
                showCreateAccountRequestPage(stage);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        grid.add(createAccountRequestButton, 0, 3);

        stage.show();
    }

    @Override
    public void start(Stage stage) throws Exception {
        showStartPage(stage);
    }
}
